#include <iostream>
#include <cmath>

using namespace std;

class Figure {
	public:
		virtual void area() = 0;
};

class Parallelogram : public Figure {
	private:
		double m_sideA;
		double m_sideB;
		double m_height;
	public:
		Parallelogram() {}
		Parallelogram (double sideA, double height)
		:m_sideA(sideA), m_height(height) {}
		virtual void area() {
			cout << m_sideA*m_height << endl;
		}
};

class Circle : public Figure {
	private:
		double m_radius;
		const double m_PI = 3.14;
	public:
		Circle (double radius)
		:m_radius(radius) {}
		void area () {
			cout << m_PI*(pow(m_radius, 2)) << endl;
		}
};

class Rectangle : public Parallelogram {
	public:
		Rectangle(double sideA, double sideB)
		:Parallelogram(sideA, sideB) {}
};

class Square : public Parallelogram {
	public:
		Square(int sideA)
		:Parallelogram(sideA, sideA) {}
};

class Rhombus : public Parallelogram {
	private:
		double m_diagA;
		double m_diagB;
	public:
		Rhombus(double diagA, double diagB)
		:m_diagA(diagA), m_diagB(diagB) {}
		void area() override {
			cout << (m_diagA*m_diagB)/2 << endl;
		}
};
		
	

int main () {
	Parallelogram p(5,4);
	Circle c(5);
	Rectangle r(4,7);
	Square s(5);
	Rhombus R(4,6);
	p.area();
	c.area();
	r.area();
	s.area();	
	R.area();
}
